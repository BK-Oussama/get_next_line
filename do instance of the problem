

	
	buffsize for this example will be 3
	text file for this example will be (14 charcter for each line):
		- aa bb cc dd zz
		- xx yy kk ll pp
		- ss qq ee rr ff
	
	ghadi nft7o lfile
	
	ghadi nqraw 3 charcters
	
	daxi li qrina ghadi n7toh buf
	
	nshofo daxi li 7etina f buffer wash fih '\n'
		hna 3endna juj 7alat:
			- 7ala 1, 2ila lqina fdaxi li qrat read \n or EOF
			- 7ala 2, 2ila kan endna string mafihch \n or EOF
		7ala 1, fhad l7ala ghadi nshedo dak substr ou ndiro join l static char,
		walkin ghadi ykhesna n7tafdo bdaxi li qrina be3d \n
		
		7ala 2, we will joing what we read on the pervoius static char, and keep 	
		reading.
	IF: ila kano fiho ghadi n3yto l substr
	IF: ila maknch fih ghadi n3yto lstrjoin
		strjoin katkhdem juj str
		we f cas 0, kaykono 3endna juj str, wa7ed baqi khawi, dak li khawi kan7to fih
		substr li endna ola buff kima huwa.
	knbqaw neqraw 7ta kanlqaw '\0' or '\n' or EOF.
	kmlna kan return new_joined_str.
	
	
	
	




	get_next_line function(fd):
	    Initialize where_read_stops to NULL (static variable)
	    Initialize buffer[BUFFER_SIZE + 1]
	    Initialize line to NULL
	    Initialize read_bytes

	    // Check for valid file descriptor and buffer size
	    If fd is negative or BUFFER_SIZE is less than or equal to 0:
	        Return NULL

	    // If where_read_stops is NULL, allocate memory for it
	    If where_read_stops is NULL:
	        Allocate memory for where_read_stops and initialize it to an empty string

	    // Loop until a newline character is found or end of file is reached
	    While read_bytes = read(fd, buffer, BUFFER_SIZE) is greater than 0:
	        Null-terminate buffer
	        Concatenate buffer to where_read_stops

	        // If newline character is found, break the loop
	        If newline character is found in buffer:
	            Break the loop

	    // Check for errors or end of file
	    If read_bytes is less than 0 or (line is NULL and where_read_stops is empty):
	        Free memory allocated for where_read_stops
	        Return NULL

	    // Extract line from where_read_stops
	    If newline character is found in where_read_stops:
	        Find position of newline character
	        Extract line from beginning of where_read_stops to newline character
	        Update where_read_stops to hold remaining part after newline character
	    Else:
	        Extract entire where_read_stops as line
	        Free memory allocated for where_read_stops

	    Return line

	
